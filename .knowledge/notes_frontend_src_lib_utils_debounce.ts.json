{"is_source_file": true, "format": "TypeScript", "description": "A utility function for debouncing calls to other functions, improving performance by limiting the rate at which a function can fire.", "external_files": [], "external_methods": [], "published": ["debounce"], "classes": [], "methods": [{"name": "export function debounce<T extends (...args: unknown[]) => unknown>(fn: T, delay = 300): T { debounce", "description": "Creates and returns a debounced version of the input function that delays its execution until after a specified delay period has elapsed since the last time it was invoked.", "scope": "", "scopeKind": ""}], "calls": ["setTimeout", "clearTimeout"], "search-terms": ["debounce", "debounce utility", "typescript function delay", "setTimeout", "clearTimeout", "throttling"], "state": 2, "file_id": 20, "knowledge_revision": 48, "git_revision": "", "ctags": [{"_type": "tag", "name": "debounce", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/utils/debounce.ts", "pattern": "/^export function debounce<T extends (...args: unknown[]) => unknown>(fn: T, delay = 300): T {$/", "language": "TypeScript", "kind": "function"}], "hash": "11d3ff81fff0870932c121129e06c7cf", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/lib/utils/debounce.ts", "revision_history": [{"48": ""}]}