{"is_source_file": true, "format": "TypeScript", "description": "This file contains a mock implementation of an API client for a note-taking application, simulating backend behavior using localStorage. It provides methods for user authentication, registration, note management (create, update, delete, list), and token management.", "external_files": ["./client"], "external_methods": ["read", "write", "genId", "nowIso"], "published": ["MockApiClient", "setAuthToken", "login", "register", "logout", "listNotes", "createNote", "updateNote", "deleteNote"], "classes": [{"name": "MockApiClient", "description": "A mock API client that mimics server interactions using local storage for a note-taking application."}], "methods": [{"name": "setAuthToken(token: string | null): void { setAuthToken", "description": "Sets the current authorization token for the mock client.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "private resolveUserByToken(): User | null { resolveUserByToken", "description": "Resolves the user information based on the current token.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async login(email: string, _password: string): Promise<AuthResponse> { login", "description": "Authenticates a user using email and password, returning a token and user info.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async register(email: string, _password: string): Promise<AuthResponse> { register", "description": "Registers a new user; initializes some demo notes.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async logout(): Promise<void> { logout", "description": "Logs out the current user by removing the token.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async listNotes(params?: ListNotesParams): Promise<Note[]> { listNotes", "description": "Returns a list of notes, optionally filtered by a search string.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async createNote(title: string, content: string): Promise<Note> { createNote", "description": "Creates a new note with a given title and content.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async updateNote(id: ID, title: string, content: string): Promise<Note> { updateNote", "description": "Updates an existing note identified by its ID.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "async deleteNote(id: ID): Promise<void> { deleteNote", "description": "Deletes a note by its ID.", "scope": "MockApiClient", "scopeKind": "class"}, {"name": "function genId(): string { genId", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function nowIso() { nowIso", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function read<T>(key: string, fallback: T): T { read", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "function write<T>(key: string, value: T) { write", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["read", "write", "genId", "nowIso", "setAuthToken", "resolveUserByToken", "login", "register", "logout", "listNotes", "createNote", "updateNote", "deleteNote"], "search-terms": ["MockApiClient", "localStorage", "mock_notes", "mock_users", "mock_tokens", "localStorage", "demo notes", "mock API client"], "state": 2, "file_id": 15, "knowledge_revision": 46, "git_revision": "", "revision_history": [{"31": ""}, {"45": ""}, {"46": ""}], "ctags": [{"_type": "tag", "name": "MockApiClient", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^export class MockApiClient implements ApiClient {$/", "language": "TypeScript", "kind": "class"}, {"_type": "tag", "name": "STORAGE_KEYS", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^const STORAGE_KEYS = {$/", "language": "TypeScript", "kind": "constant"}, {"_type": "tag", "name": "content", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const updated: Note = { ...notes[idx], title, content, updatedAt: nowIso() };$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "createNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async createNote(title: string, content: string): Promise<Note> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "deleteNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async deleteNote(id: ID): Promise<void> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "filtered", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const filtered = notes.filter((n) => n.id !== id);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.deleteNote", "scopeKind": "method"}, {"_type": "tag", "name": "genId", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^function genId(): string {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const idx = notes.findIndex((n) => n.id === id);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "idx", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const updated: Note = { ...notes[idx], title, content, updatedAt: nowIso() };$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "listNotes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async listNotes(params?: ListNotesParams): Promise<Note[]> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async login(email: string, _password: string): Promise<AuthResponse> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "logout", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async logout(): Promise<void> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const note: Note = {$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.createNote", "scopeKind": "method"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const notes = read<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.createNote", "scopeKind": "method"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const notes = read<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.deleteNote", "scopeKind": "method"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const notes = read<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.listNotes", "scopeKind": "method"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const notes = read<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.register", "scopeKind": "method"}, {"_type": "tag", "name": "notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const notes = read<Note[]>(STORAGE_KEYS.notes, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "nowIso", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^function nowIso() {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "raw", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const raw = localStorage.getItem(key);$/", "language": "TypeScript", "kind": "constant", "scope": "read", "scopeKind": "function"}, {"_type": "tag", "name": "read", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^function read<T>(key: string, fallback: T): T {$/", "language": "TypeScript", "kind": "function"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async register(email: string, _password: string): Promise<AuthResponse> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "resolveUserByToken", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  private resolveUserByToken(): User | null {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const search = (params?.search || '').trim().toLowerCase();$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.listNotes", "scopeKind": "method"}, {"_type": "tag", "name": "setAuthToken", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  setAuthToken(token: string | null): void {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "title", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const updated: Note = { ...notes[idx], title, content, updatedAt: nowIso() };$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const token = genId();$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.login", "scopeKind": "method"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const token = genId();$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.register", "scopeKind": "method"}, {"_type": "tag", "name": "token", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  private token: string | null = null;$/", "language": "TypeScript", "kind": "property", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "tokens", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const tokens = read<Record<string, string>>(STORAGE_KEYS.tokens, {});$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.login", "scopeKind": "method"}, {"_type": "tag", "name": "tokens", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const tokens = read<Record<string, string>>(STORAGE_KEYS.tokens, {});$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.logout", "scopeKind": "method"}, {"_type": "tag", "name": "tokens", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const tokens = read<Record<string, string>>(STORAGE_KEYS.tokens, {});$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.register", "scopeKind": "method"}, {"_type": "tag", "name": "tokens", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const tokens = read<Record<string, string>>(STORAGE_KEYS.tokens, {});$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.resolveUserByToken", "scopeKind": "method"}, {"_type": "tag", "name": "tokens", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const userId = this.token ? tokens[this.token] : null;$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.resolveUserByToken", "scopeKind": "method"}, {"_type": "tag", "name": "updateNote", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^  async updateNote(id: ID, title: string, content: string): Promise<Note> {$/", "language": "TypeScript", "kind": "method", "scope": "MockApiClient", "scopeKind": "class"}, {"_type": "tag", "name": "updated", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const updated: Note = { ...notes[idx], title, content, updatedAt: nowIso() };$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "updatedAt", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const updated: Note = { ...notes[idx], title, content, updatedAt: nowIso() };$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.updateNote", "scopeKind": "method"}, {"_type": "tag", "name": "user", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const user = users.find((u) => u.email.toLowerCase() === email.toLowerCase());$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.login", "scopeKind": "method"}, {"_type": "tag", "name": "user", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const user: User = { id: genId(), email };$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.register", "scopeKind": "method"}, {"_type": "tag", "name": "userId", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const userId = this.token ? tokens[this.token] : null;$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.resolveUserByToken", "scopeKind": "method"}, {"_type": "tag", "name": "users", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const users = read<User[]>(STORAGE_KEYS.users, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.login", "scopeKind": "method"}, {"_type": "tag", "name": "users", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const users = read<User[]>(STORAGE_KEYS.users, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.register", "scopeKind": "method"}, {"_type": "tag", "name": "users", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^    const users = read<User[]>(STORAGE_KEYS.users, []);$/", "language": "TypeScript", "kind": "constant", "scope": "MockApiClient.resolveUserByToken", "scopeKind": "method"}, {"_type": "tag", "name": "write", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-159557-159586/notes_frontend/src/lib/services/api/mock.ts", "pattern": "/^function write<T>(key: string, value: T) {$/", "language": "TypeScript", "kind": "function"}], "hash": "4c1c9cbe4346c9beae30646aa3cbff42", "format-version": 4, "code-base-name": "notes_frontend", "filename": "notes_frontend/src/lib/services/api/mock.ts", "fields": [{"name": "private token: string | null = null;", "scope": "MockApiClient", "scopeKind": "class", "description": "unavailable"}]}